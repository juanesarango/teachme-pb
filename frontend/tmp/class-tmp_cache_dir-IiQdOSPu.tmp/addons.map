{"version":3,"sources":["ember-bootstrap.js","ember-bootstrap/components/bs-button-group.js","ember-bootstrap/components/bs-button.js","ember-bootstrap/mixins/size-class.js","ember-bootstrap/mixins/type-class.js"],"sourcesContent":["define(\"ember-bootstrap\", [\"ember-bootstrap/index\",\"exports\"], function(__index__, __exports__) {\n  \"use strict\";\n  Object.keys(__index__).forEach(function(key){\n    __exports__[key] = __index__[key];\n  });\n});\n","define('ember-bootstrap/components/bs-button-group', ['exports', 'ember', 'ember-bootstrap/components/bs-button', 'ember-bootstrap/mixins/size-class'], function (exports, Ember, Button, SizeClass) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Component.extend(SizeClass['default'], {\n\n        /**\n         * @type string\n         * @property ariaRole\n         * @default 'group'\n         * @protected\n         */\n        ariaRole: 'group',\n\n        /**\n         * @property classNames\n         * @type array\n         * @default ['btn-group']\n         * @protected\n         */\n        classNames: ['btn-group'],\n\n        /**\n         * @property classNameBindings\n         * @type array\n         * @protected\n         */\n        classNameBindings: ['vertical:btn-group-vertical','justified:btn-group-justified'],\n\n        /**\n         * @property classTypePrefix\n         * @type String\n         * @default 'btn-group'\n         * @protected\n         */\n        classTypePrefix: 'btn-group',\n\n        /**\n         * Set to true for a vertically stacked button group, see http://getbootstrap.com/components/#btn-groups-vertical\n         *\n         * @property vertical\n         * @type boolean\n         * @default false\n         * @public\n         */\n        vertical: false,\n\n        /**\n         * Set to true for the buttons to stretch at equal sizes to span the entire width of its parent.\n         *\n         * *Important*: You have to wrap every button component in a `div class=\"btn-group\">`:\n         *\n         * ```handlebars\n         * <div class=\"btn-group\" role=\"group\">\n         * \\{{#bs-button}}My Button{{/bs-button}}\n         * </div>\n         * ```\n         *\n         * See http://getbootstrap.com/components/#btn-groups-justified\n         *\n         * @property justified\n         * @type boolean\n         * @default false\n         * @public\n         */\n        justified: false,\n\n        /**\n         * The type of the button group specifies how child buttons behave and how the `value` property will be computed:\n         *\n         * ### null\n         * If `type` is not set (null), the button group will add no functionality besides Bootstrap styling\n         *\n         * ### radio\n         * if `type` is set to \"radio\", the buttons will behave like radio buttons:\n         * * the buttons will toggle (`toggle` property of the child buttons will be set to true)\n         * * only one button may be active\n         * * the `value` property of the button group will reflect the `value` property of the active button\n         *\n         * ### checkbox\n         * if `type` is set to \"checkbox\", the buttons will behave like checkboxes:\n         * * the buttons will toggle (`toggle` property of the child buttons will be set to true)\n         * * any number of buttons may be active\n         * * the `value` property of the button group will be an array containing the `value` properties of all active buttons\n         *\n         * @property type\n         * @type string\n         * @default null\n         * @public\n         */\n        type: null,\n\n\n        /**\n         * The value of the button group, computed by its child buttons.\n         * See the {{#crossLink \"Button-Group/type:attribute\"}}`type` property{{/crossLink}} for how the value property is constructed.\n         *\n         * When you set the value, the corresponding buttons will be activated:\n         * * use a single value for a radio button group to activate the button with the same value\n         * * use an aray of values for a checkbox button group to activate all the buttons with values contained in the array\n         *\n         * @property value\n         * @type array|any\n         * @public\n         */\n        value: Ember['default'].computed('activeChildren.@each.value','type',function(key, value){\n            if (arguments.length>1) {\n                var values = !Ember['default'].isArray(value) ? [value] : value;\n                this.get('childButtons')\n                    .forEach(function(button) {\n                        button.set('active', values.contains(button.get('value')));\n                    });\n                return value;\n            }\n            switch (this.get('type')) {\n                case 'radio':\n                    return this.get('activeChildren.firstObject.value');\n                case 'checkbox':\n                    return this.get('activeChildren').mapBy('value');\n            }\n            return 1;\n        }),\n\n        /**\n         * Array of all child buttons (instances of Bootstrap.Button)\n         * @property childButtons\n         * @type array\n         * @protected\n         */\n        childButtons: Ember['default'].computed.filter('childViews', function(view) {\n            return view instanceof Button['default'];\n        }),\n\n\n        /**\n         * Child buttons that are active (pressed)\n         * @property activeChildren\n         * @type array\n         * @protected\n         */\n        activeChildren: Ember['default'].computed.filterBy('childButtons', 'active', true),\n\n\n        lastActiveChildren: [],\n        newActiveChildren: Ember['default'].computed.setDiff('activeChildren','lastActiveChildren'),\n        _observeButtons: Ember['default'].observer('activeChildren.[]','type', function() {\n            if (this.get('type') !== 'radio') {\n                return;\n            }\n\n            Ember['default'].run.scheduleOnce('actions',this, function(){\n                // the button that just became active\n                var newActive = this.get('newActiveChildren.firstObject');\n\n                if (newActive) {\n                    this.beginPropertyChanges();\n                    this.get('childButtons').forEach(function(button){\n                        if (button !== newActive) {\n                            button.set('active', false);\n                        }\n                    });\n\n                    this.endPropertyChanges();\n                }\n                // remember activeChildren, used as a replacement for a before observer as they will be deprecated in the future...\n                this.set('lastActiveChildren', this.get('activeChildren').slice());\n            });\n        }),\n\n        _observeType: Ember['default'].observer('type','childButtons.[]', function() {\n            if (this.get('type') === 'radio' || this.get('type') === 'checkbox') {\n                // set all child buttons to toggle\n                this.get('childButtons').forEach(function(button) {\n                    button.set('toggle', true);\n                });\n            }\n        }),\n\n        init: function() {\n            this._super();\n            this.get('activeChildren');\n        }\n\n\n\n\n    });\n\n});","define('ember-bootstrap/components/bs-button', ['exports', 'ember', 'ember-bootstrap/mixins/type-class', 'ember-bootstrap/mixins/size-class'], function (exports, Ember, TypeClass, SizeClass) {\n\n   'use strict';\n\n   exports['default'] = Ember['default'].Component.extend(TypeClass['default'], SizeClass['default'], {\n       tagName: 'button',\n\n       /**\n        * @property classNames\n        * @type array\n        * @default ['btn']\n        * @protected\n        */\n       classNames: ['btn'],\n\n       /**\n        * @property classNameBindings\n        * @type array\n        * @default ['active', 'block:btn-block']\n        * @protected\n        */\n       classNameBindings: ['active', 'block:btn-block'],\n\n       /**\n        * @property classTypePrefix\n        * @type String\n        * @default 'btn'\n        * @protected\n        */\n       classTypePrefix: 'btn',\n\n       /**\n        * @property attributeBindings\n        * @type array\n        * @default ['id', 'disabled', 'buttonType:type']\n        * @protected\n        */\n       attributeBindings: ['id', 'disabled', 'buttonType:type'],\n\n       /**\n        * Default label of the button. Not need if used as a block component\n        *\n        * @property defaultText\n        */\n       defaultText: null,\n\n       /**\n        * Property to disable the button\n        *\n        * @property disabled\n        */\n       disabled: false,\n\n       /**\n        * Set the type of the button, either 'button' or 'submit'\n        *\n        * @property buttonType\n        * @type String\n        * @default 'button'\n        */\n       buttonType: 'button',\n\n       /**\n        * Set the 'active' class to apply active/pressed CSS styling\n        *\n        * @property active\n        * @type boolean\n        * @default false\n        */\n       active: false,\n\n       /**\n        * Property for block level buttons\n        *\n        * See the [Bootstrap docs](http://getbootstrap.com/css/#buttons-sizes)\n        * @property block\n        * @type boolean\n        * @default false\n        */\n       block: false,\n\n       /**\n        * If toggle property is true, clicking the button will toggle the active state\n        *\n        * @property toggle\n        * @type boolean\n        * @default false\n        */\n       toggle: false,\n\n       /**\n        * If button is active and this is set, the icon property will match this property\n        *\n        * @property iconActive\n        * @type String\n        */\n       iconActive: null,\n\n       /**\n        * If button is inactive and this is set, the icon property will match this property\n        *\n        * @property iconInactive\n        * @type String\n        */\n       iconInactive: null,\n\n       /**\n        * Class(es) (e.g. glyphicons or font awesome) to use as a button icon\n        * This will render a <i class=\"{{icon}}\"></i> element in front of the button's label\n        *\n        * @property icon\n        * @type String\n        */\n       icon: Ember['default'].computed('active', function() {\n           if (this.get('active')) {\n               return this.get('iconActive');\n           } else {\n               return this.get('iconInactive');\n           }\n       }),\n\n\n       /**\n        * Supply a value that will be associated with this button. This will be send\n        * as a parameter of the default action triggered when clicking the button\n        *\n        * @property value\n        * @type any\n        */\n       value: null,\n\n       /**\n        * State of the button. The button's label (if not used as a block component) will be set to the\n        * `<state>Text` property.\n        * This property will automatically be set when using a click action that supplies the callback with an promise\n        *\n        * @property textState\n        * @type String\n        * @default 'default'\n        */\n       textState: 'default',\n\n       /**\n        * Set this to true to reset the state. A typical use case is to bind this attribute with ember-data isDirty flag.\n        *\n        * @property reset\n        * @type boolean\n        */\n       reset: null,\n\n       /**\n        * This will reset the state property to 'default', and with that the button's label to defaultText\n        *\n        * @method resetState\n        */\n       resetState: function() {\n           this.set('textState', 'default');\n       },\n\n       resetObserver: Ember['default'].observer('reset', function(){\n           if(this.get('reset')){\n               this.resetState();\n           }\n       }),\n\n       text: Ember['default'].computed('textState', 'defaultText', 'pendingText', 'resolvedText', 'rejectedText', function() {\n           return this.getWithDefault(this.get('textState') + 'Text', this.get('defaultText'));\n       }),\n\n       /**\n        * Click handler. This will send the default \"action\" action, with the following parameters:\n        * * value of the button (that is the value of the \"value\" property)\n        * * original event object of the click event\n        * * callback: call that with a promise object, and the buttons state will automatically set to \"pending\", \"resolved\" and/or \"rejected\"\n        *\n        * @method click\n        * @protected\n        * @param evt\n        */\n       click: function(evt) {\n           if (this.get('toggle')) {\n               this.toggleProperty('active');\n           }\n           var that = this;\n           var callback = function(promise) {\n               if (promise) {\n                   that.set('textState', 'pending');\n                   promise.then(\n                       function(){\n                           if (!that.get('isDestroyed')) {\n                               that.set('textState', 'resolved');\n                           }\n                       },\n                       function(){\n                           if (!that.get('isDestroyed')) {\n                               that.set('textState', 'rejected');\n                           }\n                       }\n                   );\n               }\n           };\n           this.sendAction('action', this.get('value'), evt, callback);\n       }\n\n\n   });\n\n});","define('ember-bootstrap/mixins/size-class', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Mixin.create({\n        classTypePrefix: Ember['default'].required(String),\n        classNameBindings: ['sizeClass'],\n        sizeClass: (function() {\n            var prefix = this.get('classTypePrefix'),\n                size = this.get('size');\n            return Ember['default'].isBlank(size) ? null : prefix + '-' + size;\n        }).property('size'),\n\n\n        /**\n         * Property for size styling, set to 'lg', 'sm' or 'xs'\n         *\n         * Also see the [Bootstrap docs](http://getbootstrap.com/css/#buttons-sizes)\n         *\n         * @property size\n         * @type String\n         */\n        size: null\n    });\n\n});","define('ember-bootstrap/mixins/type-class', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Mixin.create({\n        classTypePrefix: Ember['default'].required(String),\n        classNameBindings: ['typeClass'],\n        typeClass: (function() {\n            var prefix = this.get('classTypePrefix'),\n                type = this.get('type') || 'default';\n            return prefix + '-' + type;\n        }).property('type'),\n\n\n        /**\n         * Property for type styling\n         *\n         * For the available types see the [Bootstrap docs](http://getbootstrap.com/css/#buttons-options) (use without \"btn-\" prefix)\n         *\n         * @property type\n         * @type String\n         * @default 'default'\n         */\n        type: 'default'\n    });\n\n});"],"names":[],"mappingsxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"addons.js"}